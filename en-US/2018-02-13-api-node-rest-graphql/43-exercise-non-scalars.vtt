WEBVTT

1
00:00:03.631 --> 00:00:06.730
&gt;&gt; Scott: So that's what you're
gonna be working on next.

2
00:00:06.730 --> 00:00:08.200
So let's get to the challenge.

3
00:00:08.200 --> 00:00:12.220
Let me walk you through what
I'm talking about here.

4
00:00:12.220 --> 00:00:14.977
So if you check out to lesson 13.

5
00:00:24.603 --> 00:00:29.520
&gt;&gt; Scott: Let me see,
if you go to lesson 13, yeah.

6
00:00:29.520 --> 00:00:35.150
So if you go to lesson 13, you'll see I
added on line 4 a playlists property,

7
00:00:35.150 --> 00:00:37.120
a playlist field on the user site.

8
00:00:37.120 --> 00:00:40.090
So this allows us to go to a user and
get playlists.

9
00:00:41.970 --> 00:00:46.950
And then if you go look on the playlist
type, it obviously has a song.

10
00:00:46.950 --> 00:00:49.081
So that means from a user
I can get a playlist and

11
00:00:49.081 --> 00:00:50.895
I also get a song associated with that.

12
00:00:54.504 --> 00:00:56.142
&gt;&gt; Scott: So what you have to do is,

13
00:00:56.142 --> 00:01:00.354
you're gonna have to resolve
those playlists for the user, and

14
00:01:00.354 --> 00:01:05.568
then you're also going to have to
resolve those songs for the playlists.

15
00:01:05.568 --> 00:01:10.544
Now I'm gonna walk you through how to do,
I'm just going to pick

16
00:01:10.544 --> 00:01:15.990
a random example because I don't
wanna show you how to do it.

17
00:01:15.990 --> 00:01:18.510
&gt;&gt; Scott: Let's go to song, let's make
up something on song right quick.

18
00:01:18.510 --> 00:01:23.521
So if I go to song, and I'm like,
song is gonna have a new

19
00:01:23.521 --> 00:01:28.474
field on it called,
&gt;&gt; Scott: I

20
00:01:28.474 --> 00:01:32.474
don't know, composer, or producer.

21
00:01:32.474 --> 00:01:34.530
Let's say it's producer, okay?

22
00:01:34.530 --> 00:01:36.507
There's a producer here, its type is user.

23
00:01:41.238 --> 00:01:43.190
&gt;&gt; Scott: All right, so
I need to resolve this producer.

24
00:01:43.190 --> 00:01:44.820
By default it's not even there.

25
00:01:44.820 --> 00:01:48.210
In fact, our database doesn't even
have a producer property on it.

26
00:01:48.210 --> 00:01:51.040
So if we just create the database and
just fed it straight to GraphQL,

27
00:01:51.040 --> 00:01:54.640
which we're doing now, this will
break if somebody asks for producer.

28
00:01:54.640 --> 00:01:55.930
If nobody asks for producer, it's fine.

29
00:01:55.930 --> 00:01:57.201
If somebody asks for producer,

30
00:01:57.201 --> 00:01:59.990
it'll break because we just gave it
a shape that has no producer on it.

31
00:01:59.990 --> 00:02:01.780
So it's like I don't
know what to do with it.

32
00:02:01.780 --> 00:02:05.190
Not only did we not give it
a shape with a producer on it.

33
00:02:05.190 --> 00:02:07.970
Even if we did, it would probably
be a string and not an actual user.

34
00:02:07.970 --> 00:02:11.340
So this read's messed up twice
before even I got it right.

35
00:02:11.340 --> 00:02:12.550
So we'd have to resolve this.

36
00:02:12.550 --> 00:02:16.530
So the only way we do that is we
go over to Song &gt; Resolver, and

37
00:02:16.530 --> 00:02:17.680
we did this earlier today.

38
00:02:17.680 --> 00:02:23.050
Is you'd have to come down to
your resolver's object down here.

39
00:02:23.050 --> 00:02:30.750
And for the type of song, this property
right here has to match the type.

40
00:02:32.360 --> 00:02:33.530
That's where it's coming from.

41
00:02:33.530 --> 00:02:35.430
This matches this.

42
00:02:37.360 --> 00:02:42.184
So for this type of song,
when someone asks for

43
00:02:42.184 --> 00:02:49.000
the producer field, producer,
I want you to run this function.

44
00:02:49.000 --> 00:02:50.220
That's what that's saying.

45
00:02:50.220 --> 00:02:52.320
Does that make sense?

46
00:02:52.320 --> 00:02:56.000
So for the type of song,
when a query comes in asking for

47
00:02:56.000 --> 00:03:00.644
the field of producer, here is
the value that you're gonna give it.

48
00:03:00.644 --> 00:03:02.018
Right, so that value,

49
00:03:02.018 --> 00:03:06.230
in this case it would be something like
actually now we have a root value.

50
00:03:06.230 --> 00:03:08.610
The root value is the song
that this producer belongs to.

51
00:03:08.610 --> 00:03:09.860
That's gonna be passed in.

52
00:03:09.860 --> 00:03:16.560
Because this is a nested resolver, it's
going to happen after you get the song.

53
00:03:16.560 --> 00:03:18.340
Let's say somebody came in and
got one song.

54
00:03:19.390 --> 00:03:23.360
So someone came in and got one song,
it's gonna run the get song query,

55
00:03:23.360 --> 00:03:23.860
which is this one.

56
00:03:23.860 --> 00:03:25.810
So it's going to run this query.

57
00:03:25.810 --> 00:03:30.532
Which runs this function, and then GraphQL
was like cool, how do I get the producer?

58
00:03:30.532 --> 00:03:32.426
It's like that's how I get the producer.

59
00:03:32.426 --> 00:03:37.872
So it's gonna pass in that song
that was pulled here to here.

60
00:03:37.872 --> 00:03:40.590
Does that makes sense?

61
00:03:40.590 --> 00:03:44.294
So this song that's created from
the initial query is then passed down to

62
00:03:44.294 --> 00:03:46.370
the nested query as the first argument.

63
00:03:47.670 --> 00:03:48.900
And then so forth, and so forth.

64
00:03:48.900 --> 00:03:54.070
If this producer had something else on it,
which guess what it does?

65
00:03:54.070 --> 00:03:55.320
A producer's a user, and

66
00:03:55.320 --> 00:03:58.580
if users have playlists on them,
then you'd have to resolve that playlist.

67
00:03:58.580 --> 00:03:59.967
But you wouldn't do it in here.

68
00:03:59.967 --> 00:04:03.429
GraphQL would just go to the user
resolver, and just resolve it there for

69
00:04:03.429 --> 00:04:05.430
you automatically.

70
00:04:05.430 --> 00:04:06.990
So you don't have to think
of how to resolve it.

71
00:04:06.990 --> 00:04:09.410
You just need to make sure
everything eventually resolves.

72
00:04:09.410 --> 00:04:11.930
Everything on every type
eventually resolves to something,

73
00:04:11.930 --> 00:04:13.600
and then you're fine.

74
00:04:13.600 --> 00:04:16.680
I don't have to come here like,
okay, this returns a user.

75
00:04:16.680 --> 00:04:20.100
Now I got this user, now I need to
get the playlist for this user.

76
00:04:20.100 --> 00:04:21.375
You don't have to do that.

77
00:04:21.375 --> 00:04:25.040
GraphQL is like, that's a user and
they asked for playlist on this.

78
00:04:25.040 --> 00:04:27.100
Let me go to the user's resolver.

79
00:04:27.100 --> 00:04:28.540
It resolved that playlist.

80
00:04:28.540 --> 00:04:29.760
And then he asked for the songs on that.

81
00:04:29.760 --> 00:04:32.330
So let me go to the playlist resolver and
get the songs on that.

82
00:04:32.330 --> 00:04:35.448
And it will just do all that for
you as long as it all resolves.

83
00:04:35.448 --> 00:04:37.060
Does that make sense?

84
00:04:37.060 --> 00:04:37.990
That's pretty crazy.

85
00:04:37.990 --> 00:04:41.600
So you can basically create
a graph just by your query.

86
00:04:41.600 --> 00:04:45.907
So in this case, this would be
something like user.find Find one,

87
00:04:45.907 --> 00:04:48.337
assuming we had this in the database.

88
00:04:48.337 --> 00:04:52.132
It would be composer, something like that.

89
00:04:52.132 --> 00:04:53.220
This is all make believe.

90
00:04:53.220 --> 00:04:55.033
But yeah, you would do something
like that, and then you'd be done.

91
00:04:58.627 --> 00:05:01.852
&gt;&gt; Scott: Can you overload
other properties as well?

92
00:05:01.852 --> 00:05:03.660
You totally can, that's a good question.

93
00:05:03.660 --> 00:05:08.500
So let's say In our database we do
have a URL property of a song, so

94
00:05:08.500 --> 00:05:09.630
it will look for that.

95
00:05:09.630 --> 00:05:13.150
Or you'll be like yeah,
I kinda want URL to be this.

96
00:05:14.400 --> 00:05:15.120
Or I'm sorry.

97
00:05:15.120 --> 00:05:21.410
I kinda want URL to be
a function that returns thing.

98
00:05:21.410 --> 00:05:22.850
And it will will just it will use that.

99
00:05:22.850 --> 00:05:26.705
It will totally use this
over what you gave it, yeah.

100
00:05:31.816 --> 00:05:36.944
&gt;&gt; Scott: So what you're going
to have to do is, I would start

101
00:05:36.944 --> 00:05:42.940
with the playlist and
try to resolve the songs array.

102
00:05:42.940 --> 00:05:46.520
It's an array of songs so
it uses the .find, not the find1 or

103
00:05:46.520 --> 00:05:48.710
find by id, use .find.

104
00:05:48.710 --> 00:05:55.323
And then inside of the playlist resolver,
&gt;&gt; Scott: You

105
00:05:55.323 --> 00:05:59.799
need to make a nested resolver
here that when someone asks for

106
00:05:59.799 --> 00:06:05.530
songs pluralized it returns an array
of songs associated with the playlist.

107
00:06:05.530 --> 00:06:07.180
Now let's talk about
the strategy behind that.

108
00:06:07.180 --> 00:06:09.720
Let us just walk through this real quick.

109
00:06:09.720 --> 00:06:12.910
Because there's some stuff on here
that I did not tell you about,

110
00:06:12.910 --> 00:06:14.130
specifically around databases.

111
00:06:15.390 --> 00:06:19.100
So if I ask for the songs and I get
the playlist as the first argument, right?

112
00:06:21.240 --> 00:06:26.330
And we know that playlist is
coming from either get playlist,

113
00:06:26.330 --> 00:06:29.600
or all playlist, whichever query
they call it, it's coming from here.

114
00:06:29.600 --> 00:06:32.320
Or maybe they even did an update playlist.

115
00:06:32.320 --> 00:06:35.680
Whatever is returning a playlist,
it's coming from there.

116
00:06:35.680 --> 00:06:38.430
And we can assume that there's
gonna be a songs property on it.

117
00:06:38.430 --> 00:06:40.285
And that song's property
is what in a database?

118
00:06:42.789 --> 00:06:43.770
&gt;&gt; Scott: Array of strings.

119
00:06:43.770 --> 00:06:44.840
It's an array of strings.

120
00:06:44.840 --> 00:06:47.630
So we can assume playlist.songs
is an array of strings.

121
00:06:47.630 --> 00:06:50.560
So our objective is,
how do we get this array of strings and

122
00:06:50.560 --> 00:06:52.390
covert it to an array of objects?

123
00:06:52.390 --> 00:06:53.210
That's what you wanna do there.

124
00:06:54.950 --> 00:06:58.300
And this playlist right here
is a Mongoose document.

125
00:06:58.300 --> 00:07:02.270
This is a document because it
came directly from one of these,

126
00:07:02.270 --> 00:07:03.000
which is a document.

127
00:07:05.370 --> 00:07:06.300
So that's a hint.

128
00:07:06.300 --> 00:07:11.840
So whatever you can do in Mongoose
document to populate, populate,

129
00:07:11.840 --> 00:07:17.300
strings, you probably need to do
that here, document population.

130
00:07:17.300 --> 00:07:20.050
There is model level population,
and you can do that but

131
00:07:20.050 --> 00:07:21.670
it'd be a huge work around.

132
00:07:21.670 --> 00:07:24.028
You probably wanna do
document level population.

133
00:07:24.028 --> 00:07:29.333
[INAUDIBLE] What if in this case,

134
00:07:29.333 --> 00:07:37.977
a song producer just wanted
the user's playlist and

135
00:07:37.977 --> 00:07:42.700
wanted to stop right there?

136
00:07:42.700 --> 00:07:44.665
Let's see, a song producer.

137
00:07:44.665 --> 00:07:46.660
He wants, so it's up to you.

138
00:07:46.660 --> 00:07:49.090
If someone writes a query asking for
information,

139
00:07:49.090 --> 00:07:53.150
and you're saying you don't wanna give
them that information, that's up to you.

140
00:07:53.150 --> 00:07:56.611
But what you have to do is make sure that
inside of your schema that you take away

141
00:07:56.611 --> 00:08:00.080
the nominal exclamation mark,
otherwise it'll break.

142
00:08:00.080 --> 00:08:01.520
So that's what you would have to do.

143
00:08:01.520 --> 00:08:02.450
I don't recommend doing that.

144
00:08:02.450 --> 00:08:05.510
If you don't want to give someone
information and they ask for

145
00:08:05.510 --> 00:08:08.910
it, then they probably are unauthorized
to get that information,

146
00:08:08.910 --> 00:08:10.000
you should probably just throw an error.

147
00:08:11.610 --> 00:08:13.237
Otherwise I can't think of
a good reason you would

148
00:08:13.237 --> 00:08:14.601
deny someone information that is there.

149
00:08:17.947 --> 00:08:20.021
&gt;&gt; Scott: So any other questions in there?

150
00:08:20.021 --> 00:08:21.659
Okay, cool.

151
00:08:21.659 --> 00:08:26.194
All right, so yeah, you'll need a
document-level population here to populate

152
00:08:26.194 --> 00:08:30.740
the strings, the array of strings in this
playlist, and only return that array.

153
00:08:30.740 --> 00:08:31.560
That is the other secret.

154
00:08:31.560 --> 00:08:32.720
You do not return the playlist.

155
00:08:32.720 --> 00:08:34.760
You only want to return the array, right?

156
00:08:34.760 --> 00:08:36.600
What is the value of songs in a playlist?

157
00:08:36.600 --> 00:08:38.300
It's an array of song objects.

158
00:08:38.300 --> 00:08:43.270
So you want to return that
array of song objects.

159
00:08:43.270 --> 00:08:43.850
That's it.

160
00:08:43.850 --> 00:08:46.870
You don't care if that song,

161
00:08:46.870 --> 00:08:50.800
if each song in that array also
has things you have to populate

162
00:08:50.800 --> 00:08:55.380
because GraphQL will then take each
individual song and try to resolve them.

163
00:08:55.380 --> 00:08:58.120
And inside those resolvers
you would do populations.

164
00:08:58.120 --> 00:09:02.650
It's really hard to visualize, but
you only have to do that one thing.

165
00:09:02.650 --> 00:09:05.840
And then eventually you just take
care of every single leaf and

166
00:09:05.840 --> 00:09:06.980
it will resolve itself.

167
00:09:08.300 --> 00:09:10.670
It's really hard to visualize but
that's basically what it is.

168
00:09:10.670 --> 00:09:14.120
So I would recommend starting here
first and doing that for the user.

169
00:09:14.120 --> 00:09:17.700
Because really user's broken right now and
to be authentication.

170
00:09:17.700 --> 00:09:19.886
You can do it,
you just won't be able to test it.

171
00:09:19.886 --> 00:09:23.283
Because the way it works right
now it's expecting a JWT.

172
00:09:23.283 --> 00:09:25.090
I kind of left it in that
state because I was like,

173
00:09:25.090 --> 00:09:26.930
we're fine with just playlists and stuff.

174
00:09:26.930 --> 00:09:28.010
So don't worry about the user right now.

175
00:09:28.010 --> 00:09:29.520
If you do get to it, you can attempt it.

176
00:09:29.520 --> 00:09:31.480
You just won't be able to test it, so

177
00:09:31.480 --> 00:09:35.760
your task is going to be resolve
the song field in the playlist type.

178
00:09:35.760 --> 00:09:39.340
Just attempt that if you
do get that working.

179
00:09:39.340 --> 00:09:43.617
And the way you can do this is, one,
go create some songs inside of GraphicQL,

180
00:09:43.617 --> 00:09:47.370
go create some playlists inside of
GraphicQL, add some songs to a playlist.

181
00:09:47.370 --> 00:09:50.780
And then query a playlist, and
ask for the songs back, and

182
00:09:50.780 --> 00:09:52.770
then try to get the titles of the songs.

183
00:09:52.770 --> 00:09:54.820
If that works, you're good.

184
00:09:54.820 --> 00:09:59.820
If that doesn't work,
you didn't do it right, all right?

185
00:09:59.820 --> 00:10:00.780
And then if you get done with that,

186
00:10:00.780 --> 00:10:02.470
resolve the playlist
field on the user type.

187
00:10:02.470 --> 00:10:05.880
Again, you won't be able to test
this until the next lesson where we

188
00:10:05.880 --> 00:10:07.480
do authentication and stuff.

189
00:10:07.480 --> 00:10:08.800
But you can attempt it.

190
00:10:08.800 --> 00:10:12.060
And if you want to try and
test it, feel free to go ahead.

191
00:10:12.060 --> 00:10:13.121
It's only one line change.

