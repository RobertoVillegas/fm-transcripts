WEBVTT

1
00:00:00.310 --> 00:00:01.340
&gt;&gt; Zac Gordon: Folks are still coding but

2
00:00:01.340 --> 00:00:05.715
I'm just gonna walk through this example
so that we can get list posts working.

3
00:00:05.715 --> 00:00:10.860
So if I open up the read me here,
we can see first,

4
00:00:10.860 --> 00:00:12.435
we're just gonna get
familiar with the app.

5
00:00:12.435 --> 00:00:17.080
o I do encourage you to open all of these
files and just check them out because

6
00:00:17.080 --> 00:00:21.020
If you had done that, then you know
the configuration for my URL is here.

7
00:00:21.020 --> 00:00:22.380
I'm not using vagrant.local,

8
00:00:22.380 --> 00:00:25.690
that's weird, maybe I need to change that,
figuring out what that is.

9
00:00:25.690 --> 00:00:29.520
So, just to walk you through again,
config is just an object with

10
00:00:29.520 --> 00:00:33.480
properties that are either DOM elements or
hardcoded URLs that we need.

11
00:00:33.480 --> 00:00:37.260
Helpers is going to grow as we build
our app, and we've been using Helpers.

12
00:00:37.260 --> 00:00:41.710
These are just gonna be small
things that help us with our app,

13
00:00:41.710 --> 00:00:43.620
clear the post for example.

14
00:00:43.620 --> 00:00:45.470
And notice that we have
to import our config and

15
00:00:45.470 --> 00:00:49.790
then anytime were referring to stuff in
the config, we gotta do config, whatever.

16
00:00:51.440 --> 00:00:55.970
Then index is the root of ours,
index is only going to init and

17
00:00:55.970 --> 00:00:59.310
call posts,
noticing that it's importing posts and

18
00:00:59.310 --> 00:01:05.550
then finally in our posts one is where
we will make the actual http request.

19
00:01:05.550 --> 00:01:10.450
So, the first thing we need to
do is import axios, otherwise,

20
00:01:10.450 --> 00:01:12.320
we won't be able to make that work.

21
00:01:12.320 --> 00:01:18.360
So I'll say import axios and
then let's see export default.

22
00:01:18.360 --> 00:01:19.600
This is all good.

23
00:01:19.600 --> 00:01:22.340
The next thing we need to do is come down

24
00:01:22.340 --> 00:01:25.830
a little bit into where we
actually make our axios.get call.

25
00:01:25.830 --> 00:01:29.310
Now this is a shorthand version for Axios.

26
00:01:29.310 --> 00:01:31.960
We've been doing
the longhand version before.

27
00:01:31.960 --> 00:01:37.730
This gets us to the base of our URL,
this gets us to our posts.

28
00:01:37.730 --> 00:01:41.580
So the downside to working
with something like Access,

29
00:01:41.580 --> 00:01:43.460
is we're always going to
be hard coding in this.

30
00:01:43.460 --> 00:01:46.610
And this is where the benefit of
a client is really helpful cuz you just

31
00:01:46.610 --> 00:01:48.500
do .Posts and it knows.

32
00:01:49.860 --> 00:01:51.440
Then we're passing in params.

33
00:01:51.440 --> 00:01:54.610
I'm just gonna change this to three so
we're only uploading three posts.

34
00:01:57.149 --> 00:02:00.925
&gt;&gt; Zac Gordon: And
then down here, where we say, for

35
00:02:00.925 --> 00:02:06.590
each post inside of POSTS,
we can't actually do POSTS.

36
00:02:06.590 --> 00:02:08.630
We have to use response.data.

37
00:02:08.630 --> 00:02:10.890
So I'm going to copy that in.

38
00:02:14.568 --> 00:02:18.065
&gt;&gt; Zac Gordon: And the reason
we're copying this stuff here and

39
00:02:18.065 --> 00:02:22.640
then change the post to post
itself because this is posts.

40
00:02:22.640 --> 00:02:24.890
We're renaming individual post to post.

41
00:02:24.890 --> 00:02:28.430
So when it comes to rendering
an individual one, we could do it here and

42
00:02:28.430 --> 00:02:31.600
this is the kind of stuff that's
gonna be consistent, site to site.

43
00:02:31.600 --> 00:02:33.900
So that's why we're going
through the practice of copy and

44
00:02:33.900 --> 00:02:36.340
pasting, and doing all of that again.

45
00:02:37.400 --> 00:02:41.370
So when we actually render the post and
build everything out,

46
00:02:41.370 --> 00:02:47.352
the reason we're changing this stuff.

47
00:02:47.352 --> 00:02:51.857
So post.slug title.rendered,

48
00:02:51.857 --> 00:02:56.834
I'm sorry, post.title.rendered

49
00:03:04.825 --> 00:03:05.575
&gt;&gt; Zac Gordon: And

50
00:03:05.575 --> 00:03:12.590
then post.except.rendered.

51
00:03:12.590 --> 00:03:13.640
And then down here.

52
00:03:15.630 --> 00:03:17.430
We're gonna build this app
a little bit differently.

53
00:03:17.430 --> 00:03:21.210
When you click on a list of posts and

54
00:03:21.210 --> 00:03:25.500
you load an individual post on the page,
what we're gonna do is actually fire off

55
00:03:25.500 --> 00:03:30.340
a new request and get the full content for
it and then load that page again.

56
00:03:30.340 --> 00:03:33.270
So, in order to make any
requests to the API,

57
00:03:33.270 --> 00:03:36.080
the easiest way do that
is by having the ID.

58
00:03:36.080 --> 00:03:40.060
So, this is a place if you've
ever used html5 data attributes,

59
00:03:40.060 --> 00:03:41.830
where it's data dash ID.

60
00:03:41.830 --> 00:03:43.660
We're just sticking the ID in there.

61
00:03:43.660 --> 00:03:45.760
So we could say, post dot ID.

62
00:03:45.760 --> 00:03:50.120
Let's come back to the read me,
check out where we are.

63
00:03:52.726 --> 00:03:56.460
&gt;&gt; Zac Gordon: So
we've got our loading posts.

64
00:03:56.460 --> 00:03:58.410
Step 2 is pretty much done.

65
00:03:58.410 --> 00:03:59.490
We've done all that.

66
00:03:59.490 --> 00:04:02.130
Step 3, we've run npm start.

67
00:04:02.130 --> 00:04:04.840
Although you'll also need to npm install.

68
00:04:04.840 --> 00:04:07.850
And then we open up our site and
three posts should load on the page.

69
00:04:07.850 --> 00:04:09.990
So let's go to local host.

70
00:04:09.990 --> 00:04:13.700
I'm sorry.
Let me come in and

71
00:04:13.700 --> 00:04:16.610
I have to run npm install and start.

72
00:04:29.864 --> 00:04:30.607
&gt;&gt; Zac Gordon: Let's go back.

73
00:04:36.792 --> 00:04:39.350
&gt;&gt; Zac Gordon: Computer's been super slow.

74
00:04:39.350 --> 00:04:45.130
Looks like Webpack is testing
the limits of what MacBook can do?

75
00:04:45.130 --> 00:04:53.417
Okay, so now I can cd into my 6.1
&gt;&gt; Zac Gordon: And I'll tab to complete.

76
00:04:57.911 --> 00:05:04.590
&gt;&gt; Zac Gordon: And now I'm just
gonna run npm install and npm start.

77
00:05:04.590 --> 00:05:06.810
Give it a minute to run all of that and

78
00:05:06.810 --> 00:05:10.230
then once that's done we could load up our
page and everything should be working.

79
00:05:10.230 --> 00:05:12.285
So we'll just take a moment to do that.

80
00:05:15.373 --> 00:05:18.465
&gt;&gt; Zac Gordon: Okay, so that's finally
done, now I could run npm start.

81
00:05:22.688 --> 00:05:26.469
&gt;&gt; Zac Gordon: And
that should boost everything up at https.

82
00:05:49.138 --> 00:05:53.320
&gt;&gt; Zac Gordon: Okay and
something is obviously not right here.

83
00:05:53.320 --> 00:05:56.064
Okay, looks like I have an error,

84
00:05:56.064 --> 00:06:00.588
I have a period after my rendered
Let's fix that real quick.

85
00:06:05.507 --> 00:06:10.440
&gt;&gt; Zac Gordon: Right there, okay.

86
00:06:10.440 --> 00:06:12.434
Save it and
it should automatically refresh.

87
00:06:19.516 --> 00:06:22.820
&gt;&gt; Zac Gordon: Okay, so
now we've got it working.

88
00:06:22.820 --> 00:06:26.930
Although these are not going to load
the post, so that is the next step.

89
00:06:26.930 --> 00:06:31.610
And let's just go to that one real quick.

90
00:06:31.610 --> 00:06:35.060
And then I'll keep on going into
authentication directly from there.

91
00:06:35.060 --> 00:06:38.513
So let's just look at the steps.

92
00:06:41.545 --> 00:06:43.041
&gt;&gt; Zac Gordon: Single posts.

93
00:06:45.634 --> 00:06:50.540
&gt;&gt; Zac Gordon: So you know what,
it does not have any other dependencies.

94
00:06:50.540 --> 00:06:53.930
From the original one, so actually it's
gonna be a little bit faster I think if I

95
00:06:53.930 --> 00:06:59.725
just go into my 6.1 and
copy my node modules over to my 6.2.

96
00:06:59.725 --> 00:07:02.719
So I'm gonna do it that way,
may still take a moment.

97
00:07:04.972 --> 00:07:07.402
&gt;&gt; Zac Gordon: Let's move
forward with this one,

98
00:07:07.402 --> 00:07:10.649
let's come into check me
out the read me first.

99
00:07:14.483 --> 00:07:17.720
&gt;&gt; Zac Gordon: Okay so
we want to open our posts.

100
00:07:19.710 --> 00:07:20.920
No, I can't use mouse pase.

101
00:07:22.310 --> 00:07:24.930
Going to open our posts,
find the single post.

102
00:07:24.930 --> 00:07:30.090
I need to change ID to getting
the ID which I'll talk about.

103
00:07:30.090 --> 00:07:34.490
Find the axial stuff, append the ID,

104
00:07:34.490 --> 00:07:38.540
we have some singular slash,
if it's singular page or

105
00:07:38.540 --> 00:07:44.490
not stuff to work on and then we
have to load all the posts properly.

106
00:07:44.490 --> 00:07:46.508
So let's come into our source posts.

107
00:07:57.078 --> 00:08:03.453
&gt;&gt; Zac Gordon: So this is our
previous function that should be all,

108
00:08:03.453 --> 00:08:07.510
man I can't use my, okay.

109
00:08:07.510 --> 00:08:11.894
So here is the first one that we have and
if we ever played around but

110
00:08:11.894 --> 00:08:16.522
straight DOM/ g manipulation had
a high level this should make sense

111
00:08:16.522 --> 00:08:21.479
basically were getting an event,
&gt;&gt; Zac Gordon: When

112
00:08:21.479 --> 00:08:24.557
we load single post and
we want to get the ID and

113
00:08:24.557 --> 00:08:29.010
remember how we restoring the ID
up in the article itself.

114
00:08:29.010 --> 00:08:33.450
So, what I'm doing is, I'm saying go
ahead from the link that I just clicked

115
00:08:33.450 --> 00:08:37.390
over from the link I
clicked on in the post.

116
00:08:37.390 --> 00:08:41.720
So, starting the post that I click on and

117
00:08:41.720 --> 00:08:47.800
then go up from there once, to the H
element, the H2 element and then go

118
00:08:47.800 --> 00:08:52.910
up to the article element itself and then
get me the ID off that article element.

119
00:08:52.910 --> 00:08:54.650
So again it's saying start at,

120
00:08:54.650 --> 00:08:58.010
this is all the link that we
clicked on the title of the post.

121
00:08:58.010 --> 00:09:02.730
This is gonna be the h2, this is gonna
be the article, and then this is the ID.

122
00:09:04.320 --> 00:09:10.330
So we grab that and then once we have this
ID, we can't just do a get request for

123
00:09:10.330 --> 00:09:14.410
a single post here because this
is gonna get us all of the posts.

124
00:09:14.410 --> 00:09:19.282
So we will append this like this,
and we'll say get me this specific

125
00:09:19.282 --> 00:09:23.556
post that I had saved on the page
that I'm working with, and

126
00:09:23.556 --> 00:09:29.265
then change post to response data
&gt;&gt; Zac Gordon: And

127
00:09:29.265 --> 00:09:34.213
now before render post only took one
argument but we've customized it now so

128
00:09:34.213 --> 00:09:39.005
that we can have the same function work
whether we're displaying a post in

129
00:09:39.005 --> 00:09:41.420
a list format or in a single format.

130
00:09:41.420 --> 00:09:43.940
And we'll see the differences
there in a second.

131
00:09:43.940 --> 00:09:47.190
So IS_SINGLE in this case
is gonna be set to true,

132
00:09:47.190 --> 00:09:51.240
because this is the handler,
handling, loading a single post.

133
00:09:53.020 --> 00:10:00.620
So if we look at renderPost now,
&gt;&gt; Zac Gordon: Notice

134
00:10:00.620 --> 00:10:04.420
that by default It is
setting single to false.

135
00:10:04.420 --> 00:10:07.550
So if we just call render post in a single
post, it's gonna assume that we're in

136
00:10:07.550 --> 00:10:10.760
a post listing and
it'll do certain things a certain way.

137
00:10:10.760 --> 00:10:16.160
So, is single, we're gonna
change to true equal to single.

138
00:10:17.380 --> 00:10:20.000
So if it's a single page
we have to display this

139
00:10:20.000 --> 00:10:22.620
link to go back to all the other posts.

140
00:10:22.620 --> 00:10:27.410
We have to display stuff in an h1, because
we don't want an h2 if we're on a single

141
00:10:27.410 --> 00:10:30.480
post, cuz we want it to be
the main header for the page.

142
00:10:30.480 --> 00:10:37.090
And then, content here, well, that's
a markup, that's gonna render the content.

143
00:10:37.090 --> 00:10:41.450
So if we're on a listing page,
which means that we want

144
00:10:41.450 --> 00:10:45.280
a bunch of posts listed with excerpt and
a link to get more.

145
00:10:45.280 --> 00:10:51.870
Then we're going to do an h2 and put in
an anchor tag with the post.slug in it.

146
00:10:51.870 --> 00:10:53.460
And then we'll pull in our excerpt.

147
00:10:53.460 --> 00:10:58.490
So notice that if it's a single page
we're pulling it in h1 in the content.

148
00:10:58.490 --> 00:11:02.830
And if it's not a single page then
we're creating an h2 with a link and

149
00:11:02.830 --> 00:11:04.100
then pulling in the excerpt.

150
00:11:05.150 --> 00:11:08.763
So this is more JavaScript, this isn't
necessarily WordPress specific, so

151
00:11:08.763 --> 00:11:09.704
we'll keep going.

152
00:11:11.387 --> 00:11:13.407
&gt;&gt; Zac Gordon: We make sure
that we take that post id and

153
00:11:13.407 --> 00:11:16.360
we throw it up into the article so
that if we need it later.

154
00:11:16.360 --> 00:11:20.240
It's saved to the page and
then we'll save this again.

155
00:11:21.980 --> 00:11:27.770
And the reason we need to do
this twice is because up here,

156
00:11:27.770 --> 00:11:31.280
we can't attach an event
listener to this link

157
00:11:31.280 --> 00:11:34.950
because at this point this is technically,
only a string.

158
00:11:34.950 --> 00:11:40.290
It isn't until this line right here,
where we take our markup and

159
00:11:40.290 --> 00:11:45.210
we assign it as n or html, and
then it becomes valid dom nodes.

160
00:11:45.210 --> 00:11:49.050
So at that point, then we could
attach event listeners down below,

161
00:11:49.050 --> 00:11:50.270
which is what we're going to do.

162
00:11:50.270 --> 00:11:57.070
So load posts is going to call load.posts.

163
00:11:57.070 --> 00:11:57.960
So this is,

164
00:11:57.960 --> 00:12:03.200
if it's a single one, it's just going
to attach to that back to posts link.

165
00:12:03.200 --> 00:12:08.750
And then if it's not a single one, meaning
that if we're in a list of posts mode,

166
00:12:09.840 --> 00:12:13.040
then we're going to
the header of that tag.

167
00:12:13.040 --> 00:12:15.060
Go ahead and say, load the single post.

168
00:12:15.060 --> 00:12:16.550
And that will tie it all together.

169
00:12:16.550 --> 00:12:17.635
So let's go ahead and save that.

170
00:12:25.047 --> 00:12:29.384
&gt;&gt; Zac Gordon: And now when we click on
the post we should see it display there

171
00:12:29.384 --> 00:12:32.130
And all right, we are working.

172
00:12:32.130 --> 00:12:37.480
And notice that the front page is just the
excerpts and this is the actual content.

173
00:12:37.480 --> 00:12:43.155
And what we've done behind the scenes is,
originally we get all the posts but

174
00:12:43.155 --> 00:12:47.171
when someone clicks on a link
we're grabbing the ID for

175
00:12:47.171 --> 00:12:50.425
that which is again, saved in the article.

176
00:12:57.385 --> 00:13:01.220
&gt;&gt; Zac Gordon: So see right here,
data equal to 134?

177
00:13:01.220 --> 00:13:05.800
So when we click on this link,
we're gonna say grab 134.

178
00:13:05.800 --> 00:13:10.960
And in the back end come down
to our load single post.

179
00:13:10.960 --> 00:13:13.880
And that id that we get right here.

180
00:13:13.880 --> 00:13:17.620
So all this crazy code is going
from the link, getting the id and

181
00:13:17.620 --> 00:13:19.980
then we get a single code.

182
00:13:19.980 --> 00:13:23.170
You could potentially do this slightly
differently but I just wanted to

183
00:13:23.170 --> 00:13:27.610
show you what happens when you wanna do
another call once you click on a link.

184
00:13:27.610 --> 00:13:29.260
Which is a pretty common scenario.

