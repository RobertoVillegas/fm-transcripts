WEBVTT

1
00:00:00.480 --> 00:00:05.960
&gt;&gt; Zac: We'd start off looking
at our 5.1 List API posts.

2
00:00:05.960 --> 00:00:07.350
And we'll pop open our ReadMe.

3
00:00:09.170 --> 00:00:11.670
And we could see that
there's a few steps here.

4
00:00:11.670 --> 00:00:14.850
So first of all, we have to get
access to the backbone client.

5
00:00:14.850 --> 00:00:16.970
And we're gonna do it in
the same way that we did jQuery.

6
00:00:16.970 --> 00:00:19.450
We're just gonna make it a dependency.

7
00:00:19.450 --> 00:00:21.930
And then we've got to
set up our JavaScript.

8
00:00:21.930 --> 00:00:26.280
So this will involved our introduction
into the backbone client and

9
00:00:26.280 --> 00:00:27.190
how that works.

10
00:00:28.310 --> 00:00:32.700
And then we will test it and
make sure that everything runs properly.

11
00:00:34.080 --> 00:00:36.050
So where do we need to go.

12
00:00:36.050 --> 00:00:39.650
First, we need to go into
our functions dot php and

13
00:00:39.650 --> 00:00:41.929
make our file have a dependency.

14
00:00:44.016 --> 00:00:48.139
&gt;&gt; Zac: Let's go to our functions.php.

15
00:00:50.643 --> 00:00:56.390
&gt;&gt; Zac: And notice right here, it says,
make this file dependent on wp-api.

16
00:00:56.390 --> 00:01:00.150
So just like before,
we would have put jQuery down here.

17
00:01:00.150 --> 00:01:02.200
Instead, we're gonna do wp-api.

18
00:01:02.200 --> 00:01:08.670
And this will automatically load
the backbone client that we want.

19
00:01:11.950 --> 00:01:15.820
So we did that and then next we
come into our custom.php file.

20
00:01:15.820 --> 00:01:19.724
You know I don't know- If it says that.

21
00:01:27.023 --> 00:01:29.445
&gt;&gt; Zac: No, that's in our JavaScript,
setting up the JavaScript.

22
00:01:32.435 --> 00:01:35.805
So we'll come into, let's see, was there
anything else about these functions,

23
00:01:35.805 --> 00:01:36.835
there was one other thing.

24
00:01:36.835 --> 00:01:38.675
Okay, notice this line of code.

25
00:01:40.810 --> 00:01:42.682
What do you think this is
doing by just looking at it?

26
00:01:46.964 --> 00:01:51.345
&gt;&gt; Zac: This is gonna make sure that
our JavaScript code that is inside

27
00:01:51.345 --> 00:01:56.190
of here is only being run on
this custom.php template.

28
00:01:56.190 --> 00:01:59.320
And inside this custom dot php template,
we gave it a name.

29
00:01:59.320 --> 00:02:01.830
Again this is like very basic

30
00:02:01.830 --> 00:02:04.790
WordPress php stuff if you work with
theme that is all pretty common.

31
00:02:04.790 --> 00:02:08.820
But if this is new, don't worry
cuz it's already coded for you.

32
00:02:08.820 --> 00:02:12.940
So this would mean that once you put this
here that it will show up in the back end

33
00:02:12.940 --> 00:02:17.810
and you can choose it as a custom
template and it'll all work as intended.

34
00:02:17.810 --> 00:02:20.910
So there's nothing special on this page
yet but there will be as we go on.

35
00:02:22.290 --> 00:02:26.400
So this is only gonna
load on that page and

36
00:02:26.400 --> 00:02:29.670
now we need to go in to our theme.js file.

37
00:02:32.830 --> 00:02:37.570
So let's see what we've got going
on here we've got our app container

38
00:02:37.570 --> 00:02:42.850
We're loading our posts, and
then there's this function load posts

39
00:02:42.850 --> 00:02:48.430
where it says posts = GET_API_POSTS, and
it wants us to change it to this value.

40
00:02:48.430 --> 00:02:51.880
So let's copy that and

41
00:02:51.880 --> 00:02:55.710
put it in there and this is the backbone
client, this is what it looks like.

42
00:02:55.710 --> 00:03:01.170
So you'll say new.wp.collections.whatever,

43
00:03:01.170 --> 00:03:04.690
posts, pages, media, comments.

44
00:03:04.690 --> 00:03:09.275
And if you've worked with Backbone,
you may guess that you could also do like

45
00:03:09.275 --> 00:03:14.110
wp.api.model, and pull in different
things like that or post that way.

46
00:03:14.110 --> 00:03:18.170
So if you know some backbone this will
make a little bit more sense, but

47
00:03:18.170 --> 00:03:21.610
if not it's pretty intuitive and
there's not too much we have to do here.

48
00:03:22.670 --> 00:03:26.880
The next thing we do is this
just gets the posts ready but

49
00:03:26.880 --> 00:03:29.560
we still have to fetch
them in another call.

50
00:03:29.560 --> 00:03:35.140
So we're gonna change fetch
posts to posts.fetch.

51
00:03:35.140 --> 00:03:37.880
And then, this is following
the promise architecture.

52
00:03:37.880 --> 00:03:41.610
So it's basically setting
up what you want to get.

53
00:03:41.610 --> 00:03:43.510
So we're gonna get posts.

54
00:03:43.510 --> 00:03:45.440
We're fetching the posts here.

55
00:03:45.440 --> 00:03:49.100
And then, once those posts are fetched,
we're gonna clear the page.

56
00:03:49.100 --> 00:03:51.860
We haven't look at this, but
you can guess what this function is doing.

57
00:03:51.860 --> 00:03:54.160
It's basically just wiping it blank.

58
00:03:54.160 --> 00:03:58.550
And then for each of our posts,
we're going to load the post.

59
00:03:59.960 --> 00:04:01.730
So POST_HERE won't work.

60
00:04:01.730 --> 00:04:04.590
We have to pass this in, and

61
00:04:04.590 --> 00:04:08.429
this is where I have to talk
about a little backboney stuff.

62
00:04:09.830 --> 00:04:12.540
So has anybody worked with Backbone,
by chance?

63
00:04:14.196 --> 00:04:14.970
&gt;&gt; Zac: No?

64
00:04:14.970 --> 00:04:18.010
Okay, this is really
bad Backbone practice.

65
00:04:18.010 --> 00:04:22.587
Basically, the way Backbone works is
it gives you access to posts, and

66
00:04:22.587 --> 00:04:27.645
we'll come to it in a second, but
let's say that we wanted to do

67
00:04:27.645 --> 00:04:33.040
post.title.rendered specifically
all right.

68
00:04:33.040 --> 00:04:35.570
So this will give us our post but

69
00:04:37.030 --> 00:04:41.390
doesn't like you doing that
what it wants you to do is

70
00:04:43.820 --> 00:04:46.980
use a get to do like that

71
00:04:48.870 --> 00:04:52.210
I think it's either get or getattributes,
something like that, very similar.

72
00:04:53.210 --> 00:04:57.030
Now the reason you wanna do this
is because let's imagine that

73
00:04:57.030 --> 00:05:01.920
in our backbone app we're building,
some of that data is changed and

74
00:05:01.920 --> 00:05:05.080
these collections are listening
to those changes in data.

75
00:05:05.080 --> 00:05:09.160
If we take this approach
of rather than doing .get

76
00:05:09.160 --> 00:05:14.690
of just hard coding into our attributes,
we won't see those changes reflected.

77
00:05:14.690 --> 00:05:18.420
But the reason we could do this
kind of hacky thing is that

78
00:05:18.420 --> 00:05:20.270
we're not using that backbone in that way.

79
00:05:20.270 --> 00:05:24.320
It's not like we are using an entire
Backbone App where our model and

80
00:05:24.320 --> 00:05:26.070
our data is all connected.

81
00:05:26.070 --> 00:05:29.500
This is just simply helping us manage and
get access to posts.

82
00:05:29.500 --> 00:05:32.100
And the creator suggested
that we do it this way.

83
00:05:32.100 --> 00:05:37.280
So this is going to make
our next step a lot easier.

84
00:05:37.280 --> 00:05:41.340
But I will point out that it's not
necessarily the best practice.

85
00:05:42.730 --> 00:05:45.150
So we get all of our posts.

86
00:05:45.150 --> 00:05:53.290
Again, this is basically, behind the
scenes, I think it's a jQuery Ajax call.

87
00:05:53.290 --> 00:05:57.040
And it's just dolling it up, and
making it all pretty and nice for us.

88
00:05:57.040 --> 00:06:00.430
But we're basically saying, hey,
get our posts, fetch them, and then,

89
00:06:00.430 --> 00:06:06.640
when you're done, clear the posts and then
for each post go ahead and load that post.

90
00:06:06.640 --> 00:06:08.510
So we'll look down on
our load post function.

91
00:06:08.510 --> 00:06:11.660
Has anybody ever written native
Java Script like this where you

92
00:06:11.660 --> 00:06:15.048
append a markup string onto a page or
into an object?

93
00:06:15.048 --> 00:06:17.804
Yea, Nay?

94
00:06:17.804 --> 00:06:22.330
Okay, like I said, I may lose you
with some of the JavaScript we wrote.

95
00:06:22.330 --> 00:06:23.860
Don't worry about it too much.

96
00:06:23.860 --> 00:06:26.500
I'll show you the important
parts right here.

97
00:06:26.500 --> 00:06:29.500
Basically, what we're doing is
we're creating an article and

98
00:06:29.500 --> 00:06:32.250
then we're going to put a bunch
of content inside that article.

99
00:06:32.250 --> 00:06:33.090
Just think of it that way.

100
00:06:33.090 --> 00:06:37.840
So, this is going to be put
in h2 with an anchor tag,

101
00:06:37.840 --> 00:06:39.780
the title and then closing it, right?

102
00:06:39.780 --> 00:06:44.630
And if you haven't seen ES6 template
strings, they're amazing cuz they allow us

103
00:06:44.630 --> 00:06:49.930
to basically refer to variables like this,
okay?

104
00:06:51.160 --> 00:06:53.220
So it wants us to change some things.

105
00:06:53.220 --> 00:06:56.370
We're gonna change link to post.link.

106
00:06:56.370 --> 00:07:00.790
We're gonna change title
to post.title.rendered.

107
00:07:00.790 --> 00:07:05.060
And we're gonna change content
here to post.content, rendered.

108
00:07:05.060 --> 00:07:06.780
And this is why we looked before,
remember?

109
00:07:06.780 --> 00:07:08.699
It was content and
then you had to go to render.

110
00:07:10.010 --> 00:07:15.661
If we did this and removed attributes,

111
00:07:15.661 --> 00:07:21.492
we would have to do something like this.

112
00:07:31.219 --> 00:07:34.404
&gt;&gt; Zac: This does not look
as like JavaScripty and

113
00:07:34.404 --> 00:07:38.430
template languagey and
clean as you might like.

114
00:07:38.430 --> 00:07:42.520
It may potentially be stronger backbone
implementation behind the scenes, but

115
00:07:42.520 --> 00:07:45.540
since we don't really
need to leverage that and

116
00:07:45.540 --> 00:07:49.360
this is a lot cleaner,
this is why we're doing it, okay?

117
00:07:51.040 --> 00:07:54.890
So really behind the scenes that's why
we're not just passing the regular

118
00:07:54.890 --> 00:07:56.430
post here, it's a backbone thing.

119
00:07:59.130 --> 00:08:01.190
clearPosts is just taking
our entire app and

120
00:08:01.190 --> 00:08:05.320
clearing out the innerHTML setting it to
zero, so that will clear away everything.

121
00:08:05.320 --> 00:08:08.860
So once we run this code we should see

122
00:08:08.860 --> 00:08:11.550
the posts being pulled into the page and
loaded.

123
00:08:11.550 --> 00:08:18.143
So let's go ahead and save our changes and
activate our theme 5.1.

124
00:08:24.938 --> 00:08:30.656
&gt;&gt; Zac: Remember, the one thing you
have to do to get this to work is go

125
00:08:30.656 --> 00:08:37.150
into a page on your site any page will do,
I did have to set up a menu.

126
00:08:37.150 --> 00:08:39.500
If you're familiar with WordPress and

127
00:08:39.500 --> 00:08:42.356
how to use the customizer
you can go into menus.

128
00:08:48.828 --> 00:08:54.220
&gt;&gt; Zac: I only have two things on my site.

129
00:08:55.320 --> 00:08:57.341
Actually is it displaying
a menu by default for you?

130
00:08:58.915 --> 00:09:01.540
&gt;&gt; Zac: On your theme is
it showing links here?

131
00:09:02.810 --> 00:09:03.320
Yes or no?

132
00:09:03.320 --> 00:09:04.260
Yes?

133
00:09:04.260 --> 00:09:05.250
&gt;&gt; Male: Mine is.

134
00:09:05.250 --> 00:09:06.110
&gt;&gt; Zac: Okay, cool.

135
00:09:06.110 --> 00:09:08.070
So you don't have to do that
stuff I just showed you.

136
00:09:08.070 --> 00:09:09.760
Click on one of your pages.

137
00:09:09.760 --> 00:09:11.510
Go in and edit it.

138
00:09:11.510 --> 00:09:14.530
And make sure that you
choose under template.

139
00:09:14.530 --> 00:09:17.350
Not the default template,
but our Custom JS Page and

140
00:09:17.350 --> 00:09:22.290
that's what's gonna transform this and any
other page that we assign to this template

141
00:09:22.290 --> 00:09:24.860
to work with the code that we just set up.

142
00:09:26.400 --> 00:09:29.305
Remember cuz JavaScript is only
executing on that one page.

143
00:09:35.198 --> 00:09:37.365
&gt;&gt; Zac: Okay, so we come to our site now.

144
00:09:37.365 --> 00:09:40.870
GIT_API_POSTS is not defined.

145
00:09:40.870 --> 00:09:44.122
Okay, so we missed something in
theme.js so lets come back over here.

146
00:09:47.370 --> 00:09:48.550
&gt;&gt; Zac: I know why.

147
00:09:48.550 --> 00:09:51.665
I just made all my edits
not in my theme folder.

148
00:09:53.712 --> 00:09:55.840
&gt;&gt; Zac: Shake the head, man, oops.

149
00:09:59.400 --> 00:10:02.020
Okay, sorry, I gotta go and
catch up really quick.

150
00:10:02.020 --> 00:10:05.250
Okay, so we've got this all working right.

151
00:10:05.250 --> 00:10:07.370
I mean it is a completed one.

152
00:10:07.370 --> 00:10:08.610
I was editing the wrong file.

153
00:10:08.610 --> 00:10:11.760
But the code that we did should be
correct and this has all of our pages.

154
00:10:11.760 --> 00:10:15.390
Now some of this stuff,
like if we click on one of these links,

155
00:10:15.390 --> 00:10:17.570
it's going to go to the actual site.

156
00:10:17.570 --> 00:10:20.170
So ultimately,
that may not be the behavior we want.

157
00:10:20.170 --> 00:10:22.250
We could play around with that, but

158
00:10:22.250 --> 00:10:26.170
we've got this working completely
with just JavaScript now.

