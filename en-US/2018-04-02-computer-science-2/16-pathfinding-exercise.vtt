WEBVTT

1
00:00:02.442 --> 00:00:05.194
&gt;&gt; Brian Holt: So, I think actually
what's something useful for

2
00:00:05.194 --> 00:00:13.236
you to see,
&gt;&gt; Brian Holt: Nope.

3
00:00:14.831 --> 00:00:18.218
&gt;&gt; Brian Holt: So, this is a lot longer,
this is gonna be about 80 lines of code,

4
00:00:21.273 --> 00:00:26.552
&gt;&gt; Brian Holt: A bit less, maybe like 50.

5
00:00:32.030 --> 00:00:35.009
&gt;&gt; Brian Holt: Yeah, so
you're going to have this function called

6
00:00:35.009 --> 00:00:39.083
findShortestPath, right, and
it's gonna return a number, right?

7
00:00:39.083 --> 00:00:43.145
It's gonna return the integer of this took
seven steps to get from here to there.

8
00:00:48.080 --> 00:00:49.956
&gt;&gt; Brian Holt: I do have
a visualization tool.

9
00:00:49.956 --> 00:00:52.680
I was wondering why that wasn't working.

10
00:00:52.680 --> 00:00:56.021
That's what it is, it's in the console.

11
00:00:56.021 --> 00:01:03.737
So,
&gt;&gt; Brian Holt: Let's

12
00:01:03.737 --> 00:01:07.080
see if I can make this maybe a little
bit smaller, so it gets on one line.

13
00:01:08.650 --> 00:01:09.150
There we go.

14
00:01:14.160 --> 00:01:16.392
&gt;&gt; Brian Holt: So
this is the first exercise.

15
00:01:16.392 --> 00:01:18.550
You can use this tool, as well.

16
00:01:18.550 --> 00:01:21.840
You'll have to follow the way that I do
my data structures, but if you want to,

17
00:01:21.840 --> 00:01:23.460
it's available to you.

18
00:01:23.460 --> 00:01:27.812
You can see 00 and 00, this is where it's
actually the two points are trying to go

19
00:01:27.812 --> 00:01:30.347
to and you can see how it
spirals until they meet.

20
00:01:30.347 --> 00:01:32.433
And then once it meets,
it finishes, right?

21
00:01:32.433 --> 00:01:34.677
So in this one, there's a bit of a wall,

22
00:01:34.677 --> 00:01:37.458
it spirals out until
eventually they meet there.

23
00:01:37.458 --> 00:01:42.529
And then the last one here, you can
see is a huge spiral that you have to

24
00:01:42.529 --> 00:01:48.730
get from this part all the way around
the spiral and out and over there, right?

25
00:01:48.730 --> 00:01:52.109
And you can see down here that it
slowly fills up each one of those.

26
00:01:55.022 --> 00:02:00.051
&gt;&gt; Brian Holt: So if that's what you
want to do, if you wanna use that,

27
00:02:00.051 --> 00:02:04.974
you have to go over to completed and
you have to copy over

28
00:02:04.974 --> 00:02:09.591
the log maze function,
which will do that for you.

29
00:02:13.613 --> 00:02:21.150
&gt;&gt; Brian Holt: But, nonetheless,
&gt;&gt; Brian Holt: Let's go down and

30
00:02:21.150 --> 00:02:22.180
take a look at these data.

31
00:02:22.180 --> 00:02:25.224
So this is what I'm going to
be passing into you, right?

32
00:02:28.936 --> 00:02:33.870
&gt;&gt; Brian Holt: You want to get
from one 2 to the other, right?

33
00:02:33.870 --> 00:02:35.511
And you can't go through 1s.

34
00:02:35.511 --> 00:02:38.619
So 0s are open space,
2s are origin points, and

35
00:02:38.619 --> 00:02:41.443
1s are things that you
cannot pass through.

36
00:02:44.486 --> 00:02:49.896
&gt;&gt; Brian Holt: I gave you,
&gt;&gt; Brian Holt: A 4 by 4,

37
00:02:49.896 --> 00:02:53.360
a 6 by 6, an 8 by 8, a 15 by 15.

38
00:02:53.360 --> 00:02:58.480
And then if you're feeling brave and wanna
see if you do some of the edge cases,

39
00:02:58.480 --> 00:03:01.190
like what happens if they're
next to each other, right?

40
00:03:01.190 --> 00:03:05.830
And what happens if it's
an impossible maze cuz at that point,

41
00:03:05.830 --> 00:03:07.010
you can't find it, right?

42
00:03:07.010 --> 00:03:11.632
So if you run one of the queues to
completion, right, and then at that point,

43
00:03:11.632 --> 00:03:13.637
you know for a fact I'm boxed in.

44
00:03:13.637 --> 00:03:16.160
I can't get to the other one so
then you would return -1.

45
00:03:18.730 --> 00:03:20.772
But you can see here
that I've described it so

46
00:03:20.772 --> 00:03:23.205
it's not going to run until
you actually wanna do it.

47
00:03:23.205 --> 00:03:24.703
But again, I'd recommend
tackling these one at a time.

48
00:03:28.341 --> 00:03:30.249
&gt;&gt; Brian Holt: Any questions
about the requirements here?

49
00:03:32.600 --> 00:03:34.745
So it's going to be passing into the maze,

50
00:03:34.745 --> 00:03:38.870
which is going to be that array of arrays
of numbers that I just showed you, right?

51
00:03:39.980 --> 00:03:44.310
It's gonna be giving you the first origin,
the second origin.

52
00:03:44.310 --> 00:03:46.680
It doesn't actually really matter which
is the first, which is the second.

53
00:03:46.680 --> 00:03:48.760
It's one origin and the other origin.

54
00:03:50.280 --> 00:03:55.320
And then from there, you should return
the shortest path, which I would do

55
00:03:55.320 --> 00:03:59.070
iteratively if I were you, but that's
up to you how you choose to solve that.

56
00:04:00.260 --> 00:04:06.140
And the last thing that I wanted to say
is that I give you this data structure.

57
00:04:06.140 --> 00:04:09.636
You're going to have to make some more
complicated data structure than this.

58
00:04:09.636 --> 00:04:12.610
Cuz you're gonna have to be able to say,
this has been visited by this number,

59
00:04:12.610 --> 00:04:13.570
this is this far away.

60
00:04:13.570 --> 00:04:18.467
So you can see, again,
if we go into the completed

61
00:04:18.467 --> 00:04:23.265
one,
&gt;&gt; Brian Holt: I have a function in here.

62
00:04:25.731 --> 00:04:28.890
&gt;&gt; Brian Holt: Well,
I think it's useful to talk about.

63
00:04:28.890 --> 00:04:34.184
So the first thing I do here is I create
this visited data structure, right?

64
00:04:34.184 --> 00:04:36.082
That's definitely something
that you'll wanna do,

65
00:04:36.082 --> 00:04:37.743
is have some more
complicated data structure.

66
00:04:37.743 --> 00:04:40.317
This has like, is it closed, right?

67
00:04:40.317 --> 00:04:43.050
Is it something that I can't pass through?

68
00:04:43.050 --> 00:04:47.300
The length away from the origin opened by,
so I keep track of,

69
00:04:47.300 --> 00:04:48.590
was it opened by no one?

70
00:04:48.590 --> 00:04:51.840
Was it opened by A, or was it opened by B?

71
00:04:51.840 --> 00:04:56.900
And then the x and y, so, some sorta data
structure like that I would suggest doing.

72
00:04:56.900 --> 00:05:01.480
And then this is also a very useful
function to code up as well, getNeighbors.

73
00:05:01.480 --> 00:05:06.321
So if I give you 1,1 this
will return to you 1,0,

74
00:05:06.321 --> 00:05:10.637
0,1, all of the different neighbors to do.

75
00:05:10.637 --> 00:05:12.270
And they'll also check is that a wall?

76
00:05:12.270 --> 00:05:13.541
Can I go there?

77
00:05:13.541 --> 00:05:16.400
I would suggest doing something
like getNeighbors as well.

78
00:05:16.400 --> 00:05:20.449
It makes it a lot easier that you kind of
contain all that insanity to one function.

79
00:05:23.897 --> 00:05:25.910
&gt;&gt; Brian Holt: This is difficult.

80
00:05:25.910 --> 00:05:29.258
I don't expect you to finish this.

81
00:05:29.258 --> 00:05:34.010
But I would expect you to eventually
finish this at some point in the future.

82
00:05:34.010 --> 00:05:37.970
It's good to do, so, cool.

