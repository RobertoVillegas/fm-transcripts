WEBVTT

1
00:00:00.160 --> 00:00:04.135
&gt;&gt; Brian Holt: So
I am going to make you write it.

2
00:00:04.135 --> 00:00:06.887
So if we go to exercise here.

3
00:00:11.665 --> 00:00:12.876
&gt;&gt; Brian Holt: I have
three functions here.

4
00:00:12.876 --> 00:00:15.863
Preorder, inorder, and postorder.

5
00:00:15.863 --> 00:00:20.301
Here, I'm gonna very strongly
recommend that you turn off

6
00:00:20.301 --> 00:00:25.195
the auto-run behavior,
because this is going to be recursive.

7
00:00:25.195 --> 00:00:31.128
It doesn't have to be recursive, but
I made it recursive, it makes it easier.

8
00:00:31.128 --> 00:00:33.808
And then go ahead and write these and

9
00:00:33.808 --> 00:00:38.465
then you can see down here the tree
that I've created for you.

10
00:00:38.465 --> 00:00:42.739
I believe the tree that I gave you is,
let me just make sure.

11
00:00:51.593 --> 00:00:52.515
&gt;&gt; Brian Holt: Nope, it's not.

12
00:00:52.515 --> 00:00:53.061
Okay, never mind.

13
00:00:53.061 --> 00:00:54.188
Anyway, this is your tree right here.

14
00:00:56.770 --> 00:00:58.303
&gt;&gt; Brian Holt: And then you can see here,

15
00:00:58.303 --> 00:01:01.102
this is what it is going
to expect back from you.

16
00:01:01.102 --> 00:01:03.022
This is a valid binary search tree so

17
00:01:03.022 --> 00:01:06.103
your in order traversal will
give you back a sorted list.

18
00:01:11.923 --> 00:01:12.423
&gt;&gt; Brian Holt: Cool.

19
00:01:14.631 --> 00:01:18.237
&gt;&gt; Brian Holt: So what you're going to do
here is you're going to take in an array,

20
00:01:18.237 --> 00:01:19.899
the array will be given to you.

21
00:01:19.899 --> 00:01:25.889
And then each node you'll
process differently, obviously.

22
00:01:28.323 --> 00:01:29.933
&gt;&gt; Student: Can you describe
the nodes specifically?

23
00:01:29.933 --> 00:01:35.484
&gt;&gt; Brian Holt: Yeah, they just,
they have a value and a left and a right.

24
00:01:39.588 --> 00:01:43.052
&gt;&gt; Brian Holt: So every one of these is
going to be called with this tree exactly.

25
00:01:46.215 --> 00:01:50.553
&gt;&gt; Brian Holt: Actually,
let's see if I look here.

26
00:01:56.750 --> 00:01:58.645
&gt;&gt; Brian Holt: Yeah, in any case,

27
00:01:58.645 --> 00:02:03.328
so [COUGH] I want you to take
this particular tree and

28
00:02:03.328 --> 00:02:08.921
then I want you to add every
element in this tree to an array.

29
00:02:08.921 --> 00:02:14.376
And then these three will differ based
on what order you add it to that array.

30
00:02:14.376 --> 00:02:19.460
Each one of these took me maybe
five lines of code total,

31
00:02:19.460 --> 00:02:24.218
so just to give you an idea
of the magnitude of code you

32
00:02:24.218 --> 00:02:28.963
should be writing,
&gt;&gt; Brian Holt: Let me make sure

33
00:02:28.963 --> 00:02:30.585
that's true before I truly surf it.

34
00:02:30.585 --> 00:02:33.452
Yeah, five lines of code each.

35
00:02:33.452 --> 00:02:40.313
So give or take ten lines of code,
not take but give maybe.

36
00:02:40.313 --> 00:02:46.636
[LAUGH] Cool, I will give you, let's say,
another 15 minutes to work on this.

37
00:02:46.636 --> 00:02:49.854
And then we'll talk about it and move on.

